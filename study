OBhttps://www.gitbook.com/book/yeasy/docker_practice/details   GITBOOK  Docker-从入门到实践
git push origin master  //远端分支  本地分支

https://github.com/widuu/chinese_docker/blob/master/installation/ubuntu.md
https://github.com/widuu/chinese_docker/blob/master/installation/ubuntu.md#Ubuntu%E5%AE%89%E8%A3%85Docker  

godoc -http=:6060  godoc 离线版的网页文档

http://blog.csdn.net/skh2015java/article/details/53033473  mongo golang

http://studygolang.com/articles/6405 mongo 添加索引 golang

http://mrljdx.com/2015/04/02/Vi-Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/ vim 命令

http://www.cnblogs.com/shiningrise/p/5503955.html git命令

git status 检查当前文件状态
git status -s --short是状态简览
(https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93)
git add 跟踪新文件 
git add是一个多功能命令,可以用它开始跟踪新文件,或者把已跟踪的文件放到缓存区,还能用于合并时把有冲突的文件标记为已解决状态等.这个命令理解为"添加内容到下一次提交中"而不是"将一个文件添加到项目中"要更加合适.
git commit 提交
尽管暂存区域的方式可以精心准备要提交的细节,但是有时候这么做明显是有些繁琐,git提供了一个跳过使用暂存区域的方式,在提交的时候给git commit加上-a选项,git就会自动吧所有已经跟踪过的文件暂存起来一并提交,从而跳过git add步骤.
git rm 删除文件 
如果是直接在项目中删除文件,git status中会显示 changes not staged for commit

(https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000  git log和git reset命令)
git log 查看我们提交的历史记录
git reset --hard HEAD^ 回退到上一个版本
git reset --hard HEAD^^回退到上一个的上一个版本
git reset --hard HEAD~100回退到一百个版本前
git reset --hard 3628164 回退到指定版本,版本号不用写全,git会自己去找
当然如果回退之后又想回到后面的那个(从未来会退到现在,我们此时此刻在现在想回到刚才的 未来),我们就要记住commit id,
如果我们没有记住commit id的话我们使用git reflog命令

子网掩码不能单独存在,它必须和ip地址一起使用.子网掩码的作用只有一个,就是将某个IP地址划分为网络地址和主机地址两部分.

http://blog.csdn.net/feng88724/article/details/6829416  mysql中engine=innodb和engine=myisam的区别

vpn工作原理和搭建方法
ss翻墙的原理是 客户端必须本身支持socks5协议,这样客户端本地的shadowsocks socks5代理进程互换数据.这也使得很多软件没有办法通过ss实现翻墙,因此我需要vpn来解决这个问题.
vpn virtual private network 虚拟专用网络 vpn通常拿来做两个事情,一个是让世界任意两台机器进入一个虚拟的局域网中(这个局域网的数据通讯是加密的,很安全,和家庭局域网没有区别).一个是可以用来翻墙.
vpn比ss底层,vpn通过操作系统的接口虚拟出一张网卡,后续整个操作系统的网络通讯都将通过这张虚拟网卡进行收发.这和任意一个代理的实现思路都差不多.应用层不知道网卡是虚拟的,这样vpn虚拟网卡将以中间人的身份对数据进行加工,从而实现各种神奇的效果.具体来说,vpn是通过编写一套网卡驱动并注册到操作系统实现的虚拟网卡,这样数据只要经过网卡就可以进行拦截处理了.

1.首先在vps上部署vpn server,客户端所有将经过虚拟网卡的加密封装后都转发给vps上的vpn server,由它来发送给目标服务器,由vpn协议加密从而绕过GFW实现访问墙外网站,下面以pptp vpn协议为例说明

===========

(http://www.fwolf.com/blog/post/320)
http referer 是header的一部分,当浏览器向web服务器发送请求的时候,一般会带上referer,告诉服务器我是从哪个链接过来的,服务器借此可以获得一些信息用于处理.比如从我主页上链接到一个朋友那里,他的服务器就能够从http referer中统计出每天有多少用户点击我主页上的链接访问他的网站



http://www.gooseeker.com/doc/thread-4085-1-1.html  网易股票数据api


sql操作

创建数据库 数据表 创建普通索引 创建唯一索引
*修改表结构
*打印建表的sql语句
*导出sql语句
group  by  以...条件来分组 / having  具有...属性*
http://blog.csdn.net/fang_yunliang/article/details/74114912 sql语句

mysql -uroot -proot -d dbname > db.sql  只是导出表结构
mysql -uroot -proot dbname >db.sql     导出表结构和数据



alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
export GOROOT=/usr/local/go
export GOPATH=/Users/Sunny/gopath
export PATH=$PATH:/usr/local/apache-tomcat-8.5.14/bin:$GOPATH/bin
JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home
PATH=$JAVA_HOME/bin:$PATH:.
CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.
export JAVA_HOME
export PATH
export CLASSPATH


#    export http_proxy=”http://127.0.0.1:8123/”

#    export https_proxy=”http://127.0.0.1:8123/”

#    export ftp_proxy=”http://127.0.0.1:8123/”

#    export no_proxy=”localhost,127.0.0.1,localaddress,.localdomain.com”

#    export HTTP_PROXY=”http://127.0.0.1:8123/”


EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False
指定一个子查询,检查行的存在 如果存在则返回,如果不存在,则不返回


http://www.cnblogs.com/gaizai/archive/2012/06/12/2546755.html  mysql搭建Amoeba  --> 负载均衡架构
http://www.cnblogs.com/CareySon/p/3627594.html 数据库集群

where 子句的作用是在对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据，where条件中不能包含聚组函数，使用where条件过滤出特定的行。
having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚组函数，使用having 条件过滤出特定的组，也可以使用多个分组标准进行分组。


docker:
docker的三个概念：镜像（image）容器（container）仓库（respository）
https请求 http+ssl/tls在http上面加了一层处理加密信息的模块.服务端和客户端的传输都会通过TLS进行加密,所以传输都是加密后的数据.
1.客户端发起https请求
	用户在浏览器中输入一个https网址,然后连接server的442端口
2.服务端的配置
	 采用https协议需要有一套数字证书,可以自己制作,可以向组织申请.区别是自己颁发的证书需要客户端验证通过,才可以继续访问,而使用受信任i







对称加密:
明文 <-> 密钥 <-> 密文
密文 <-> 密钥 <-> 明文
常见的加密算法有DES AES RC5 RC6
非对称加密:
比对称加密算法优秀 对称加密快但是安全性相对于非对称加密来说比较低 如果其中一个节点密钥被盗窃了,那么整体的信息都被破解了
如何做到一个节点的密钥被盗窃,最起码保证你给其他人发送的密文不会被破解, 解决方法就是 "私钥-公钥" 公钥可以随意分发,没有私钥在一段时间内(几千年内)是不能破解的,信息使用公钥加密,只能使用私钥进行解密查看其中的内容.
这种加密是单向的,所以被称为非对称加密算法
是不能破解的,信息使用公钥加密,只能使用私钥进行解密查看其中的内容.
这种加密是单向的,所以被称为非对称加密算法
常见的加密算法 SSH TLS
http://dmdgeeker.com/goBook/docs/ch09/crypto.html  aes加密解密 golang
http://www.jianshu.com/p/cc20d90ac138 使用sql查看mysql数据库大小

http://www.ghugo.com/update-multiple-rows-with-different-values-and-a-single-sql-query/ 批量更新多条记录的不同值 

select concat(round(sum(data_length/1024/1024),2),'MB') as data from tables where table_schema='home';
https://www.gitbook.com/book/yeasy/blockchain_guide/details  区块链技术指南


golang book


=======
http://zhibimo.com/read/wang-miao/mastering-bitcoin/Chapter01.html 精通比特币

golang book
time.Tick函数挺方便,但是只有程序整个生命周期都需要这个时间时我们使用它比较合适,否则的话我们可以使用如下:
ticker := time.NewTicker(time.Second)
<-ticker.C
ticker.Stop()
channel的零值是nil,因为对一个nil的channel发送和接收操作会永远阻塞,在select语句中操作nil的channel永远都不会被select到,我们可以使用nil来激活或者禁用case,来达成处理其他输入或输出事件时超时和取消的逻辑.

